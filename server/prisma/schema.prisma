// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Crear nodelo usuario
//nombre, apellido, contraseña, correo, activo, avatar, role, direccion

// Crear modelo direccion
//

model user{
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String 
  lastName        String
  identification  String  @unique
  password        String
  email           String  @unique
  isActive        Boolean? @default(false)
  avatar          String?
  role            String? @default("user")
  address         address?
  createdAt       DateTime? @default(now())
  userTrucks      userTruck[]
}

model truck {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  licensePlate  String   @unique
  brand         String
  model         String
  year          String
  mileage       Int
  capacity      Int
  actualStatus  String?   @default("En operación")
  tires         tire[]
  refueling     refueling[]
  maintenances  maintenance[]
  userTrucks    userTruck[]
}

model userTruck {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user      user      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  truck     truck     @relation(fields: [truckId], references: [id])
  truckId   String    @db.ObjectId
  trips     trip[]
}


model address{
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  department   String
  municipality String
  nomenclature String 
  user         user?  @relation(fields: [userId], references: [id])
  userId       String @unique @db.ObjectId
}

model tire {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  brand       String
  wear        Float?
  mileage     Int?
  position    Int
  velocityIndex Int
  wetGrip     String
  createdAt   DateTime?    @default(now())
  truck       truck       @relation(fields: [truckId], references: [id])
  truckId     String      @db.ObjectId
}

model trip {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  originPlace       String
  destinationPlace  String
  distance          Float
  time              Float
  completed         Boolean    @default(false)
  userTruck         userTruck  @relation(fields: [userTruckId], references: [id])
  userTruckId       String     @db.ObjectId
}


model refueling {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  quantity    Float
  cost        Float
  efficiency  Float
  truck       truck     @relation(fields: [truckId], references: [id])
  truckId     String    @db.ObjectId
}

model maintenance {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  startDate   DateTime
  finalDate   DateTime
  cost        Float
  completed   Boolean   @default(false)
  truck       truck     @relation(fields: [truckId], references: [id])
  truckId     String    @db.ObjectId
}

